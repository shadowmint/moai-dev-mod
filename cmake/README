Build
=====

mkdir build
cd build
cmake ..
make

or:

mkdir build
cd build
cmake .. -G "MSYS Makefiles"
make

WARNING: Invoking cmake invokes the configure / build of various 3rdparty libs.
         You probably don't want to use ccmake.


Requires
========

xcode + command line tools (dos2unix)

or:

http://www.mingw.org/wiki/msys/

or:

apt-get install dos2unix build-essential cmake


Not supported
=============

Android, iOS, visual studio
(see FAQ below)


Failed Builds
=============

Make sure you have the most recent version of libtool installed,
if they're old some 3rd party library autotool builds will fail.

http://www.gnu.org/software/libtool/
http://www.gnu.org/software/autoconf/
http://www.gnu.org/software/automake/

OSX is especially bad for having old versions of these tools, 
even using fink / ports. You probably have to install them from
source.

Hint:

  ./configure --prefix=/usr
  make
  sudo make install


FAQ
===

Why does calling cmake invoke all the configure scripts?
--

It's easier to do this than porting all those libraries to cmake.

Why not make cmake depend on system libraries?
--

It makes it easier to tweek the build later to support ARM targets.
This is a pain if you're dependning on system libraries. 

Why does building take ages and dump loads of messages like this?
--

     Checking E:/projects/moai-dev/3rdparty/curl-7.26.0/tests/data/test51

     Matching fragment: 0000000   <   t   e   s   t   c   a   s   e   >  \r  \n   <   i   n   f

     dos2unix: converting file E:/projects/moai-dev/3rdparty/curl-7.26.0/tests/data/test508 to Unix format ...

You checked your archive out of git with the whole line endings. 
Don't worry, that's the default if you're using msys git. 
If you're not using msys git something weird happened. 

Anyway, \r\n will cause the autotools suite to fail silently during
the configure step and then fail with obscure error messages during 
build.

Check every single file for invalid line endings is a bit 
extreme, but since this is a problem that KEEPS TURNING UP
because it's the default, its now the default to check too.

If you want to disable this behaviour edit moaideps/utils/macros.cmake
and change the config option at the top:

  ## Configuration options
  set(MACROS_CONFIG_DISABLE_CR_CHECK 0)

to:

  ## Configuration options
  set(MACROS_CONFIG_DISABLE_CR_CHECK 1)

However, make SURE you've checked the code out of git without 
any carriage returns, or your build will fail.

Why configure? These toolchains suck.
--

The third party packages moai depends on use them; there's
no way around it other than to suggest to the maintainers of
those packages they drop automake because it's rubbish. :/

Why no iOS love?
--

xcodebuild command line tools don't seem to play nicely with
cmake; you're almost certainly better off using the xcode 
project to build for iOS. 

Why no VS love?
--

VS projects exist in the vs* directories; VS build is totally
different from a mingw build, and (specifically) vs does not 
support C99, and doesn't have a sane build environment for
the autotools to run in. Use the VS project files to build for
VS.

Why no android love?
--

Not implemented yet. There's no reason this build approach
wouldn't work for android, but it needs to custom -arch
attributes set for the autotools libraries and a custom
build toolchain for the the cmake build.
