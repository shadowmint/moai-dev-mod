============================================================
GOLD Parser Builder
Version 3.2.3
============================================================


========================================
Log
========================================

Grammar        Details           * was implicitly defined
Grammar        Details           / was implicitly defined
Grammar        Details           The grammar contains a total of 5 formal terminals.
Grammar        Success           The grammar was successfully analyzed
LALR States    Details           The temporary First and Nullable tables were successfully created
LALR States    Details           LALR computation took: 0 Hours 0 Minutes 0 Seconds
LALR States    Success           The LALR Table was succesfully created
LALR States    Details           Total actions: 10 Shifts, 44 Reduces, 4 Gotos, 1 Accepts.
DFA States     Details           The terminal 'Text' is variable length.
DFA States     Details           The initial Nondeterministic Finite Automata has 28 states
DFA States     Success           The DFA State Table was successfully created
DFA States     Details           DFA computation took: 0 Hours 0 Minutes 0 Seconds
System         Complete          The grammar was successfully analyzed and the CGT file was created.


========================================
Terminals
========================================

0       (EOF)
1       (Error)
2       (Whitespace)
3       *
4       /
5       DoxyEnd
6       DoxyStart
7       Text


========================================
Nonterminals
========================================

8       <Block>
9       <BlockSeq>
10      <File>


========================================
Defined Sets
========================================

{Text}     {HT}{LF}{FF}{CR}{Space}!"#$%&'()+,-.0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}


========================================
Rules
========================================

0       <File> ::= <BlockSeq>
1       <File> ::= 
2       <BlockSeq> ::= <BlockSeq> <Block>
3       <BlockSeq> ::= <Block>
4       <Block> ::= DoxyStart
5       <Block> ::= DoxyEnd
6       <Block> ::= Text
7       <Block> ::= *
8       <Block> ::= /


========================================
DFA States
========================================

State 0
        Goto 1       {VT}
        Goto 2       {HT}{LF}{FF}{CR}{Space}!"#$%&'()+,-.0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Goto 3       *
        Goto 5       /


State 1
        Accept (Whitespace)


State 2
        Goto 2       {HT}{LF}{FF}{CR}{Space}!"#$%&'()+,-.0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~{NBSP}
        Accept Text


State 3
        Goto 4       /
        Accept *


State 4
        Accept DoxyEnd


State 5
        Goto 6       *
        Accept /


State 6
        Goto 7       *


State 7
        Accept DoxyStart




========================================
LALR States
========================================

State 0
        <S'> ::= . <File> (EOF)                    
        <File> ::= . <BlockSeq>                    EOF
        <File> ::= .                               EOF
        <BlockSeq> ::= . <BlockSeq> <Block>        EOF  *  /  DoxyEnd  DoxyStart  Text
        <BlockSeq> ::= . <Block>                   EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . DoxyStart                    EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . DoxyEnd                      EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . Text                         EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . *                            EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . /                            EOF  *  /  DoxyEnd  DoxyStart  Text

        * Shift 1
        / Shift 2
        DoxyEnd Shift 3
        DoxyStart Shift 4
        Text Shift 5
        <Block> Goto 6
        <BlockSeq> Goto 7
        <File> Goto 8
        (EOF) Reduce Rule 1


State 1
        <Block> ::= * .                            EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 7
        * Reduce Rule 7
        / Reduce Rule 7
        DoxyEnd Reduce Rule 7
        DoxyStart Reduce Rule 7
        Text Reduce Rule 7


State 2
        <Block> ::= / .                            EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 8
        * Reduce Rule 8
        / Reduce Rule 8
        DoxyEnd Reduce Rule 8
        DoxyStart Reduce Rule 8
        Text Reduce Rule 8


State 3
        <Block> ::= DoxyEnd .                      EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 5
        * Reduce Rule 5
        / Reduce Rule 5
        DoxyEnd Reduce Rule 5
        DoxyStart Reduce Rule 5
        Text Reduce Rule 5


State 4
        <Block> ::= DoxyStart .                    EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 4
        * Reduce Rule 4
        / Reduce Rule 4
        DoxyEnd Reduce Rule 4
        DoxyStart Reduce Rule 4
        Text Reduce Rule 4


State 5
        <Block> ::= Text .                         EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 6
        * Reduce Rule 6
        / Reduce Rule 6
        DoxyEnd Reduce Rule 6
        DoxyStart Reduce Rule 6
        Text Reduce Rule 6


State 6
        <BlockSeq> ::= <Block> .                   EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 3
        * Reduce Rule 3
        / Reduce Rule 3
        DoxyEnd Reduce Rule 3
        DoxyStart Reduce Rule 3
        Text Reduce Rule 3


State 7
        <File> ::= <BlockSeq> .                    EOF
        <BlockSeq> ::= <BlockSeq> . <Block>        EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . DoxyStart                    EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . DoxyEnd                      EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . Text                         EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . *                            EOF  *  /  DoxyEnd  DoxyStart  Text
        <Block> ::= . /                            EOF  *  /  DoxyEnd  DoxyStart  Text

        * Shift 1
        / Shift 2
        DoxyEnd Shift 3
        DoxyStart Shift 4
        Text Shift 5
        <Block> Goto 9
        (EOF) Reduce Rule 0


State 8
        <S'> ::= <File> . (EOF)                    

        (EOF) Accept


State 9
        <BlockSeq> ::= <BlockSeq> <Block> .        EOF  *  /  DoxyEnd  DoxyStart  Text

        (EOF) Reduce Rule 2
        * Reduce Rule 2
        / Reduce Rule 2
        DoxyEnd Reduce Rule 2
        DoxyStart Reduce Rule 2
        Text Reduce Rule 2




